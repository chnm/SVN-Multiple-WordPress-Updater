#!/bin/bash

#------------------------------------------------------------------------------#
#   Dynamically switch to newest version of Wordpress using SVN                #
#                                                                              #
#                                                                              #
#   @Author: Ammon Shepherd                                                    #
#   @Date:   07.01.11                                                          #
    VERSION="1.6.5"                                                            #  
#------------------------------------------------------------------------------#

#ToDo: 
# - integrate wpversions into this script, perhaps.
# - Implement the steps to strengthen/protect WP installs


#------------------------------------------------------------------------------#
#                           Change log                                         #
#                                                                              #
# See ChageLog at https://github.com/mossiso/SVN-Multiple-WordPress-Updater/   #
#------------------------------------------------------------------------------#

set -e # End the script if any statement returns a non-true return value
set -u # End script if an unset variable is encountered.

# Set colors for echo
black='\E[30;40m'
red='\E[1;31;40m'
green='\E[32;40m'
yellow='\E[33;40m'
blue='\E[1;34;40m'
magenta='\E[35;40m'
cyan='\E[36;40m'
white='\E[1;37;40m'
reset=`tput sgr0`

# Constants
CURDATE=`date +%F`
SVNREPORT="svnreport-$CURDATE"
# http://codex.WordPress.org/Installing/Updating_WordPress_with_Subversion
OLDBASE="http://svn.automattic.com/wordpress"
SVNBASE="http://core.svn.wordpress.org"
TMPFILE=`mktemp` || exit 1
CONTENTBK=".wp-content-backup.zip"


USAGE='
Usage: wpupdate [OPTIONS]... [VERSION NUMBER]
Switch or update the WordPress install(s) to the VERSION NUMBER.

Example: wpupdate -f /home/wp-versions -u -b 2.7
This would update all of the installs listed in wp-versions to the 2.7 branch.

"wpupdate -h" for help
'

HELPTEXT='wpupdate '$VERSION' by Ammon Shepherd

'$USAGE'

OPTIONS:
 -b     use the branches, can not be used with -t (tags) option

 -c     use the wp-config file to grab the database user name and password

 -d     supply the database name to use. Use only when updating a single
        install

 -f     path to a file containing a list of paths to WordPress installs, can
        not be used with -i (single install) option. File must consist of full
        paths in the form "/wwwroot/sites/mossiso.com/blog/" each on a separate
        line. A ";" semi-colon designates a commented line.  

 -h     display this help info

 -i     path to  a single svn install, can not be used with -f (versions file)
        option 

 -k     skip backing up the wp-content folder and database

 -n     run as a normal user, do not use sudo

 -o     path to output file containing report of svn update. File will be
        created if it does not exist. The directories must already exist. The
        default is to save it to your home directory (ex. '$HOME')

 -p     turn off the steps to secure and protect WP. Steps include removing
        the install.php file, adding rules to the htaccess file to protect
        the wp-config.php file, the .svn directories, and the
        wp-content/uploads directory. These steps are done by default.

 -v     outputs version information and exits

 -r     output the default SVN repo used and exit

 -s     svn URL to use for updates (defaults to '$SVNBASE')

 -u     use "svn update", can not be used with -w (switch) option

 -w     use "svn switch", can not be used with -u (update) option 

 -t     use the tags, can not be used with -b (branches) option

 -x     skip fixing permissions and owners


WHAT IT DOES:
    First the wpupudate program makes a backup copy of the MySQL database and
    the wp-contents/ directory. It places these backups in the WP install
    directory.
    
    A WordPress version must be specified. By default the WordPress installs
    are upgraded to the specified branch install. If the -t (tags) option is
    used, the installs will be updated to the specified tag version. If the -w
    (switch) option is used, then the installs are switched to the branch (by
    default) or tag (with -t option) version specified.

THINGS TO KNOW:
    By default the program runs as sudo. To run as normal user, pass the -n
    flag.  This user must have absolute privileges over all files in the
    WordPress folders.

    If the -f or -i flags are not given on the command line, the program will
    attempt to update the current directory.

    You will be prompted for a MySQL user and pass that must have access to all
    of the databases (ex. MySQL root or admin account). Unless the -n flag is
    passed you will be prompted for your user password to enable sudo.  
'


# Set variables of unused options
BRANCH=''
CONFIG=''
DBNAME=''
FILENAME=''
SINGLE=''
NOBACKUP=''
NOSUDO=''
REPORTPATH=''
NEWURL=''
TAGS=''
SVNOPT=''
SKIPFIX=''
SKIPSECURE=''


###################       FUNCTIONS     ########################################
# Get the MySQL user and password
function ask_db_account() {
    # Get the MySQL user/pass but don't show it on the CLI
    echo -n "Enter a MySQL user with access to all databases: "
    read -s sqluser
    echo
    echo -n "Enter the MySQL pass: "
    read -s sqlpass
    echo
}

# Get a valued from the wp-config.php file.
# Usage: Call the function and set the result to a variable. Give the function
# the Variable in the wp-config.php file to get, ex: 
# DBUSER=$(get_config_value DBUSER) # or DBUSER=`get_config_value DBUSER`
function get_config_value() {
    # help on BASH function return values from here:
    # http://www.linuxjournal.com/content/return-values-bash-functions
    value=''
    if [[ -n "$1" && -n "$2" ]]; then
        value=`grep "${1}" ${2}/wp-config.php | sed -r -e "s/^[^']+'.*', '([^']+)'.*/\1/"`
        echo $value
    fi
}


#####################    END FUNCTIONS        ##################################


# Get the options
while getopts "bcd:f:hi:kno:prs:tuvwx" options; do
    case $options in
        b ) BRANCH="branches";;
        c ) CONFIG='true';;
        d ) DBNAME="$OPTARG";;
        f ) FILENAME="$OPTARG";;
        h ) echo "$HELPTEXT"
            exit 0;;
        i ) SINGLE="$OPTARG";;
        k ) NOBACKUP='true';;
        n ) NOSUDO='true';;
        o ) REPORTPATH="$OPTARG";;
        p ) SKIPSECURE="true";;
        r ) echo "$SVNBASE"
            exit 0;;
        s ) NEWURL="$OPTARG";;
        t ) TAGS="tags";;
        u ) SVNOPT="update";;
        v ) echo "wpupdate $VERSION"
            exit 0;;
        w ) SVNOPT="switch";;
        x ) SKIPFIX='true';;
        \? ) echo "$USAGE"
             exit 1;;
        * ) echo "$USAGE"
            exit 1;;
    esac
done
shift `expr $OPTIND - 1`

# If no options are specified, spit out the help text, have to have a version
if [ $# -eq 0 ]; then
    echo "$USAGE"
    exit
fi


if [ -z $1 ]; then
    echo "$USAGE"
    echo
    exit 0;
elif [ -n $1 ]; then
    # Get the array containing the full paths to the Wordpress installs to
    # update from a file.  tip from
    # http://www.linuxquestions.org/questions/showthread.php?p=2867155#post2867155

    exec 6<&0

    if [[ -n $FILENAME && -z $SINGLE ]]; then
        if [ -f $FILENAME ]; then
            exec < $FILENAME
        else
            exec 0<&6 6<&-
            echo "ERROR: [-f] Must be a file."
            echo "$USAGE"
            exit 1
        fi
    elif [[ -z $FILENAME && -n $SINGLE ]]; then
        if [ -d $SINGLE ]; then
            echo $SINGLE > $TMPFILE
            exec < $TMPFILE
        else
            exec 0<&6 6<&-
            echo "ERROR: [-i] Must be a directory."
            echo "$USAGE"
            exit 1
        fi
    elif [[ -n $FILENAME && -n $SINGLE ]]; then
        # If the f and i flags are both set, show help and quit. Can't have both
        exec 0<&6 6<&-
        echo "$HELPTEXT"
        exit 1
    else
        # If no f or i flag, then assume updating only the current directory.
        # Previous behavior was to prompt for file containing list or update 
        # the current directory.
        pwd > $TMPFILE
        if [[ -d .svn && -f wp-config.php ]]; then
            exec < $TMPFILE
        else
            echo "Current directory is not an svn WordPress install."
            exit 1
        fi
    fi

    # Initialize the variable for the array index counter
    CNT=''
    while read line
    do
        # Check if line is commented, if not add to the array
        comment=";"
        case $line in
            *"$comment"*)
                ;;
            *)
                (( CNT++ ))
                filearray[$CNT]=$line
                ;;
        esac
    done

    exec 0<&6 6<&-

    if [[ -z "${CONFIG-}" ]]; then
        ask_db_account
    fi


    # Loop through all of the paths from the file, or the current dir
    for path in ${filearray[@]}
    do

        # Check to make sure the path is actually a directory
        if [[ ! -d $path ]]; then
            echo -e "$red $path does not exist. $reset"
            continue
        fi

        cd $path

        # Check to see if it's an .svn install
        if [[ ! -d .svn && ! -f wp-config.php ]]; then
            echo -e "$red $path is not an svn install of WordPress. $reset"
            continue
        fi

        echo
        echo "---------------------------------------------"
        echo -e "Updating $green $path $reset"
        echo

        ################################################################
        #                                                              #
        #                       SETUP VARIABLES                        #
        #                                                              #
        ################################################################
#:<<'COMMENT5'

        # Get rid of trailing slash if there.
        path=${path%/}

        #Get the base folder name of the install - the name of the website.
        sitename=`pwd | sed -r -e "s/\//-/g"`

        # Get the server owner and group
        ownr=`ls -lad ${path}/wp-content/themes | cut -f3 -d" "`
        grp=`ls -lad ${path}/wp-content/themes | cut -f4 -d" "`

        # Get information from the wp-config.php file in order to make
        #   a backup copy 
            # Get the database name
        if [[ -z "${DBNAME-}" ]]; then
            db_name=`get_config_value DB_NAME $path`
            #db_name=`grep "DB_NAME" wp-config.php | sed -r -e "s/^[^']+'.*', '([^']+)'.*/\1/"`
        else
            # If the 'd' flag was used, set that value as the database name
            db_name=$DBNAME
        fi

            # If the 'c' flag is used, grab the db user and pass from the config file
        if [[ -n "${CONFIG-}" ]]; then
            sqluser=`get_config_value DB_USER $path`
            sqlpass=`get_config_value DB_PASSWORD $path`
            db_name=`get_config_value DB_NAME $path`
            #sqluser=`grep "DB_USER" wp-config.php | sed -r -e "s/^[^']+'.*', '([^']+)'.*/\1/"`
            #sqlpass=`grep "DB_PASSWORD" wp-config.php | sed -r -e "s/^[^']+'.*', '([^']+)'.*/\1/"`
        fi

            # Get the table prefix
        tb_prefix=`grep "table_prefix" wp-config.php | cut -d";" -f1 | cut -d"=" -f2 | sed -e "s|'||g" -e 's|"||g' -e "s|;||g" -e "s| ||g"`
            # Get a list of the tables
        table_list=`mysql -u$sqluser -p$sqlpass $db_name --raw --silent --silent --execute="SHOW TABLES;"`


#COMMENT5

        ################################################################
        #                                                              #
        #                       MAKE BACKUPS                           #
        #                                                              #
        ################################################################
#:<<'COMMENT4'
        if [[ 'true' == $NOBACKUP ]]; then
            echo "Skipping backup"

        else

            #     Make a backup of the wp-content folder and the MySQL DB  
            echo "Creating backup of MySQL database..."
            # Clear the tables value
            tables="" 
            for tablename in ${table_list[@]}
            do
                # If the table has the correct prefix, add it to the tables array
                if [[ "$tablename" =~ $tb_prefix ]]; then
                    tables+="$tablename "
                fi
            done
            # Use mysqldump to make an sql file of the correct tables
            if [[ 'true' == $NOSUDO ]]; then
                mysqldump -u$sqluser -p'$sqlpass' --opt $db_name $tables > $path/.${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql
                zip -q .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql.zip .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql
                rm -f .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql 
            else
                sudo su - -c "mysqldump -u $sqluser -p'$sqlpass' --opt $db_name $tables > $path/.${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql"
                sudo zip -q .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql.zip .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql
                sudo rm -f .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql 
            fi

            echo "Creating backup of 'wp-content'..."
            # Make the backup copy of the wp-content folder
            #   zip -q flag: quietly, don't output info
            #   zip -u flag: Replace (update) an existing entry in the zip
            #   archive only if it has been modified more recently than the
            #   version already in the zip archive.
            #   zip -r flag: recursively
            if [[ 'true' == $NOSUDO ]]; then
                zip -qur ${path}/${CONTENTBK} ${path}/wp-content
            else
                sudo zip -qur ${path}/${CONTENTBK} ${path}/wp-content
            fi

        fi # end of backing up 
#COMMENT4


        ################################################################
        #                                                              #
        #                   REPOSITORY CHECK                           #
        #                                                              #
        ################################################################
#:<<'COMMENT3'
        # Check if it's the right repository, if not prompt to use
        #   current or to switch to the default
            # Get the current repository used
        currentrepo=`svn info | grep "Repository Root" | cut -d' ' -f3`

            # Check it against the default repo
        if [ $currentrepo != $SVNBASE ]; then
            # Prompt of which repo to use
            echo
            echo -e "Current repository is '$currentrepo' while the default repository is '$SVNBASE'. \n\n\tWhich repo would you like to use? \n\t[1] = $currentrepo \n\t[2] = $SVNBASE (default)"
            echo -n "(Type a number or <ENTER> to use the default.) : "
            read repochoice

            # Set the 'userepo' variable to the chosen value
            if [[ '1' == $repochoice ]]; then
                userepo=$currentrepo
            else
                userepo=$SVNBASE
                echo "Relocating svn installation to $userepo..."
                if [[ 'true' == $NOSUDO ]]; then
                    svn switch --relocate $currentrepo $userepo
                else
                    sudo svn switch --relocate $currentrepo $userepo
                fi
            fi
        # Set to the default
        else
            userepo=$SVNBASE
        fi
#COMMENT3


        ################################################################
        #                                                              #
        #                         RUN SVN                              #
        #                                                              #
        ################################################################
#:<<'COMMENT2'
        # Set whether it's an update or a switch. Use update by default
        #   (if option was not given).
        if [ -z $SVNOPT ]; then
            switch="update"
        else
            switch="$SVNOPT"
        fi

        # Set it to a branch or tag. Default is to use branches
            # If branches is selected and tags is not, then set to branches
        if [[ -n $BRANCH && -z $TAGS ]]; then
            kind="$BRANCH"

            # If branches is not selected and tags is, then set to tags
        elif [[ -z $BRANCH && -n $TAGS ]]; then
            kind="$TAGS"

            # If both branches and tags are selected, then prompt user
            #   for which they wanted to use.
        elif [[ -n $BRANCH && -n $TAGS ]]; then
            echo "You can only use 'branches' or 'tags', not both. Type 'b' for branches, 't' for tags: "
            read what_kind
            if [ $what_kind == "t" ]; then
                kind="tags"
            else
                kind="branches"
            fi
        else
            kind="branches"
        fi

        # Set the SVN URL to the user supplied or default svn URL and
        #   add the branch or tag
        if [ -z $NEWURL ]; then
            SVNURL="$userepo/$kind"
        else
            # Get rid of trailing slash if there.
            NEWURL=${NEWURL%/}
            SVNURL="$NEWURL/$kind"
        fi

        # If the option to create the svn reports is not set, then use
        #   the user's home directory.
        if [ -z $REPORTPATH ]; then
            REPORTPATH=$HOME
        fi
        if [ ! -d $REPORTPATH/wpupdate-reports ]; then
            # Make a folder to hold the reports.
            mkdir $REPORTPATH/wpupdate-reports
        fi

        echo
        echo -e "${yellow}Running svn ${reset}on $path ..."

        # Set the variable for the path and name of the report file
        SVNREPORTFILE="$REPORTPATH/wpupdate-reports/${SVNREPORT}${sitename}"
        echo -e "Saving output to $white $SVNREPORTFILE $reset..."

        # Open a file descriptor to put all svn output to a file.
        exec 7>&1
        exec > $SVNREPORTFILE
        if [[ 'true' == $NOSUDO ]]; then
            svn $switch $SVNURL/$1/ $path/
        else
            sudo svn $switch $SVNURL/$1/ $path/
        fi
        exec 1>&7 7>&-

        # spit out any svn conflicts
        if [[ `grep "C " $SVNREPORTFILE` ]]; then
            svnconflicts=`grep "C " $SVNREPORTFILE` 
            echo -e "SVN had the following errors: \n $red $svnconflicts $reset"
        fi
#COMMENT2


        ################################################################
        #                                                              #
        #                      FIX PERMISSIONS                         #
        #                                                              #
        ################################################################
#:<<'COMMENT1'
        # Fix the permissions and set the owner for all WP files. Don't
        #   mess with the group in case it is something special (as in
        #   a different group for some wp-content folders to allow
        #   apache to write to them).
        if [[ 'true' == $SKIPFIX ]]; then
            echo "Skipping permissions fixing..."
        else
            echo "Fixing permissions ..."
            if [[ 'true' == $NOSUDO ]]; then
                find $path -iname "*wp-*" -exec chown -R $ownr '{}' \;
                find $path -iname ".htaccess" -exec chown $ownr '{}' \;
                find $path -iname "*.sql" -exec chown $ownr '{}' \;
                find $path -iname "license.txt" -exec chown $ownr '{}' \;
                find $path -iname "index.php" -exec chown $ownr '{}' \;
                find $path -iname "readme.html" -exec chown $ownr '{}' \;
                find $path -iname "xmlrpc.php" -exec chown $ownr '{}' \;
                find $path -type d -iname "*wp-*" -exec chmod ug=rwx,g+s,o=rx '{}' \;
                find $path -type f -iname "*wp-*" -exec chmod 664 '{}' \;
                if [[ 'true' != $NOBACKUP ]]; then
                    chown $ownr:$grp ${path}/${CONTENTBK}
                    chown $ownr:$grp .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql.zip
                fi
            else
                sudo find $path -iname "*wp-*" -exec chown -R $ownr '{}' \;
                sudo find $path -iname ".htaccess" -exec chown $ownr '{}' \;
                sudo find $path -iname "*.sql" -exec chown $ownr '{}' \;
                sudo find $path -iname "license.txt" -exec chown $ownr '{}' \;
                sudo find $path -iname "index.php" -exec chown $ownr '{}' \;
                sudo find $path -iname "readme.html" -exec chown $ownr '{}' \;
                sudo find $path -iname "xmlrpc.php" -exec chown $ownr '{}' \;
                sudo find $path -type d -iname "*wp-*" -exec chmod ug=rwx,g+s,o=rx '{}' \;
                sudo find $path -type f -iname "*wp-*" -exec chmod 664 '{}' \;
                if [[ 'true' != $NOBACKUP ]]; then
                    sudo chown $ownr:$grp ${path}/${CONTENTBK}
                    sudo chown $ownr:$grp .${db_name}_${tb_prefix}BACKUP-${CURDATE}.sql.zip
                fi
            fi
        fi

#COMMENT1


        ################################################################
        #                                                              #
        #                   UPGRADE MYSQL DATABASE                     #
        #                                                              #
        ################################################################
###:<<COMMENT0
        # Run the web based upgrade script using curl
        echo
            # get the url of the site, unset variable first.
        url=''
        url=( $(mysql -u$sqluser -p$sqlpass $db_name --raw --silent --silent --execute="SELECT option_value FROM ${tb_prefix}options WHERE option_name='siteurl' LIMIT 1") )
            # Set the home to be the same as the url, in case it isn't in the database.
        homeurl=( $(mysql -u$sqluser -p$sqlpass $db_name --raw --silent --silent --execute="SELECT option_value FROM ${tb_prefix}options WHERE option_name='home' LIMIT 1") )
        if [[ -z "${homeurl-}" ]]; then
            homeurl=$url
        fi

        # Test if the url variable has a value
            # Grab the first four characters, and if they are 'http'
            #   then there is a value there.
        urlCheck=( ${url:0:4} )
        if [[ 'http' == $urlCheck ]]; then
            echo -e "Running DB update on $blue $homeurl $reset"
            curl -o /dev/null "$url/wp-admin/upgrade.php?step=1&backto="
        else
            echo -e "Remember to run the upgrade script for $red $homeurl $reset!!"
        fi
        echo 

        # remove the tempfile when updating the current directory
        if [ -f $TMPFILE ]; then
            if [[ 'true' == $NOSUDO ]]; then
                rm -f $TMPFILE
            else
                sudo rm -f $TMPFILE
            fi
            echo
        fi
#COMMENT0


        ################################################################
        #                                                              #
        #                    Secure WP install                         #
        #                                                              #
        ################################################################
###:<<COMMENT01
        if [[ 'true' == $SKIPSECURE ]]; then
            echo "Skip security fixes..."
        else
            # Remove the install.php file
            if [ -f $path/wp-admin/install.php ]; then
                echo "Removing install.php file"
                if [[ 'true' == $NOSUDO ]]; then
                    rm -f $path/wp-admin/install.php
                else
                    sudo rm -f $path/wp-admin/install.php
                fi
            fi

            uploads="${path}/wp-content/uploads/"
            if [ -d $uploads ]; then
                echo "Fixing permissions for 'uploads' directory and checking .htaccess file"
                ########################################################################
                #####  Fix the permissions

                # Test for setfacl program, then remove all ACL's. We shouldn't need them.
                is_setfacl=`which setfacl`
                if [[ -n "$is_setfacl" ]]; then
                    if [[ 'true' == $NOSUDO ]]; then
                        find $uploads -type d -exec setfacl -b '{}' \;
                        find $uploads -type f -exec setfacl -b '{}' \;
                    else
                        sudo find $uploads -type d -exec setfacl -b '{}' \;
                        sudo find $uploads -type f -exec setfacl -b '{}' \;
                    fi
                fi

                # Change permissions of files (664) and directories (775, group sticky
                # bit)
                if [[ 'true' == $NOSUDO ]]; then
                    find $uploads -type d -exec chmod ug=rwx,g+s,o=rx '{}' \;
                    find $uploads -type f -exec chmod 664 '{}' \;
                else
                    sudo find $uploads -type d -exec chmod ug=rwx,g+s,o=rx '{}' \;
                    sudo find $uploads -type f -exec chmod 664 '{}' \;
                fi


               ###########################################################################  
               #########   TAKE THIS OUT OF SCRIPT WHEN UPLOADING TO GIT       ##########

                # Now change the uploads group recursively to be webwrite
                if [[ 'true' == $NOSUDO ]]; then
                    chgrp webwrite -R $uploads
                else
                    sudo chgrp webwrite -R $uploads
                fi
                ###########################################################################


                ########################################################################
                #####  HTACCESS STUFF

                # There should be a .htaccess file in the wp-content/uploads/ folder to
                # limit the types of files that can be uploaded and downloaded. Check
                # for the .htaccess file, create it if need be, and fix the
                # permissions.

                htfile="${uploads}.htaccess"
                htcontent='
## Only allow the following file formats to be accessed
Order Allow,Deny
Deny from all
<Files ~ "\.(jpeg|jpg|png|gif|gz|pdf)$">
Allow from all
</Files>

RewriteCond %{HTTP:Content-Disposition} \.php [NC]
RewriteCond %{HTTP:Content-Type} image/.+ [NC]
RewriteRule .* - [F,NS,L]
'

                # If there is an .htaccess file already
                if [[ -a "$htfile" ]]; then
                    allowed=`cat $htfile | grep "jpeg\|jpg\|png\|gif\|gz\|pdf"`
                    # And if there is NOT a line with "jpeg|jpg|png|gif" in it
                    # already
                    if [[ -z "$allowed" ]]; then
                        # Then show the current contents and ask if it should
                        # be modified
                        echo 
                        echo -e "$green $htfile $reset"
                        cat $htfile
                        echo 
                        echo "Change file?"
                        echo -e "${red}[ Enter ]:  no changes to file${reset}"
                        echo -e "      ${yellow}[ a ]:  append to end of file${reset}"
                        echo -e "      ${blue}[ w ]:  write over file${reset}"
                        read changefile
                        if [[ "w" == "$changefile" ]]; then
                            if [[ 'true' == $NOSUDO ]]; then
                                echo "$htcontent" > $htfile
                            else
                                sudo echo "$htcontent" > $htfile
                            fi
                        elif [[ "a" == "$changefile" ]]; then
                            if [[ 'true' == $NOSUDO ]]; then
                                echo "$htcontent" >> $htfile
                            else
                                sudo echo "$htcontent" >> $htfile
                            fi
                        fi

                    else
                        echo -e "      ${green}.htaccess file looks fine.${reset}"
                    fi

                else
                    echo
                    echo -e "$reset Created .htaccess file"
                    if [[ 'true' == $NOSUDO ]]; then
                        echo "$htcontent" > $htfile
                    else
                        sudo echo "$htcontent" > $htfile
                    fi

                fi

                # Change the owner/group of .htaccess file
                if [[ 'true' == $NOSUDO ]]; then
                    chown ${ownr}:${grp} $htfile
                else
                    sudo chown ${ownr}:${grp} $htfile
                fi




            fi # end if uploads dir exists


            # Check if .htaccess file is protecting wp-config.php and .svn
            # directories


        fi # end if skip secure

#COMMENT01

    done

else
    echo "$HELPTEXT"
    echo 
    exit 0
fi

exit 0
